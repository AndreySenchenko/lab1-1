//
//  main.cpp
//  LabWork1.1
//
//  Created by Andrey on 10/22/19.
//  Copyright © 2019 Andrey. All rights reserved.
//

//Лабораторна робота 1-1. Точка та контур
//Умова задачі
//Версія 1 («точка та зафіксований контур»)
//Визначити, чи лежить точка площини всередині контуру, на контурі, або зовні його. Контур (див. варіанти нижче) задається параметром a = 10, точка – парою дійсних координат (x, y). Вхідні дані, а саме, пару координат точки, задає користувач за допомогою клавіатури.
// 13.    Трикутник: (0,–a), (a,0), (0,a).

//Вимоги до виконання:

//1. Програма складається з шести функцій – головної та п’яти допоміжних:
//    виведення даних про автора aboutA,
//    введення точки getP,
//    виведення точки putP,
//    визначення розташування whereP,
//    обробки точки processP.
//
//2. У головній функції означено змінні для параметра контуру та координат точки. Головна функція містить виклики функцій aboutA, getP, processP.
//3. Функція aboutA (без параметрів) виводить у першому рядку назву роботи, у другому номер групи, прізвище та ім’я автора програми через пробіл.
//4. Функція getP має два параметри-посилання, за допомогою яких передає дійсні координати точки. Повертає ознаку успішного введення координат.
//5. Функція putP виводить координати точки у вигляді (x;y).
//6. Функція whereP повертає ознаку розташування –1, 0, або 1, якщо, відповідно, точка всередині контуру, на контурі, або за межами контуру.
//7. Функція processP викликає функцію putP, виводить одне з повідомлень IN_C, ON_C, OUT_C («всередині контуру», «на контурі», «за межами контуру») та значення параметра контуру.
//8. На початку програми записати прототипи функцій, далі головну функцію, далі – решту функцій.
//9. Програма здається разом з аркушем паперу в клітинку, який містить рисунок з контуром та точками, на яких студент перевіряв роботу програми, а також табличку, в якій записано координати цих точок та відповідні їм вихідні дані, які має виводити програма.
//Програми, в яких є глобальні змінні або які не виводять запрошень до введення або виводять повідомлення, відмінні від зазначених, будуть відправлятися на доробку! Це саме стосується й подальших версій.

#include <iostream>

using namespace std;

//      1. Програма складається з шести функцій – головної та п’яти допоміжних
bool getCont(double &a);
void aboutA();                                  // виведення даних про автора
bool getP(double &x, double &y);                // введення точки
void putP(double x, double y);                  // виведення точки
int  whereP(double x, double y,  double a);     // визначення розташування
void processP(double x, double y, double a);    // обробки точки
void processCont (double a);

int main() {
    //    2. У головній функції означено змінні для параметра контуру та координат точки.
    //       Головна функція містить виклики функцій aboutA, getP, processP.
    
    double a = 10; // Контур задається параметром a = 10, точка – парою дійсних координат (x, y)
    double x;
    double y;
    
    aboutA();
    int res = getP(x, y);
    
    if (res == 0) {
        cout << "Помилка введення, координати були введені невірно" << endl;
        return 1;
    }
    processP(x, y, a);
    
    return 0;
}

void aboutA() {
    
    //    виведення даних про автора
    //
    //    3. Функція aboutA (без параметрів) виводить
    //    у першому рядку назву роботи,
    //    у другому номер групи, прізвище та ім’я автора програми через пробіл.
    
    cout << "Лабораторна робота 1-1. \"Точка та контур\"" << endl;
    cout << "Група №K-16" << " " << "Сенченко Андрій" << endl;
    
}

bool getP(double &x, double &y) {
    //    введення точки
    //
    //    4. Функція getP має два параметри-посилання,
    //    за допомогою яких передає дійсні координати точки.
    //    Повертає ознаку успішного введення координат.
 
    cout << "Введіть координату x: ";
  
    if (!(cin>>x))
        return false;
    
    cout << "Введіть координату y: ";
  
    if (!(cin>>y))
        return false;
    return 1;
    
}
void putP(double x, double y) {
    //    виведення точки
    //
    //    5. Функція putP виводить координати точки у вигляді (x;y).
    
    cout << "(" << x << ", " << y << ")" << endl;
    
}



int whereP(double x, double y, double a) {
    //      визначення розташування
    //
    //      6. Функція whereP повертає ознаку розташування
    //      –1, 0, або 1, якщо, відповідно, точка всередині контуру,
    //      на контурі, або за межами контуру.
    
    //    13.    Трикутник: (0,–a), (a,0), (0,a). a  = 10
    if ((x < 0) || (x + y > a) || (y < x - a)){
        return 1;
    } else if ((x > 0) && (x + y < a) && (y > x - a)){
        return -1;
    } else {
        return 0;
    }
}

void processP(double x, double y, double a){
    
    //      обробки точки
    //
    //      7. Функція processP викликає функцію putP, виводить одне з повідомлень
    //      IN_C, ON_C, OUT_C («всередині контуру», «на контурі», «за межами контуру»)
    //      та значення параметра контуру.
//
//    string  IN_C = "всередині контуру";
//    string  ON_C = "на контурі";
//    string OUT_C = "за межами контуру";
    
    putP(x, y);
    
    int res = whereP(x, y, a);
    
//    cout << "Точка знаходиться ";
    
    switch (res) {
        case  0: cout << "ON_C"  << endl;  break;
        case  1: cout << "OUT_C" << endl;  break;
        default: cout << "IN_C"  << endl;  break;
    }
    cout << a << endl;
    
}


bool getCont(double &a){
    
    //1. Додати функцію getCont. Вона повертає ознаку, чи отримано від користувача додатне значення параметра контуру. Це значення передається з її виклику за допомогою параметра-посилання.
    

    if (a <= 0) {
        return false;
    }
    else {
      
        return true;
    }
}


void processCont (double a,double x, double y, double z){

//2. Додати функцію обробки контуру processCont, параметром якої є параметр контуру. Вона в циклі викликає функції введення координат точки, обробки точки та виведення результатів обробки. У разі неуспішного введення точки вона виводить повідомлення <<<END OF POINTS>>> і закінчує свою роботу.
    
    bool index = true;
    while(index == true){
        index = getP(x, y);
        processP(x, y, z);
        putP(x, y);
    }
    cout << "<<<END OF POINTS>>>" << endl;
    
}





//  Версія 2 («контур, точки та відстані»)
//Отримати від користувача розмір контуру та послідовність точок. Для кожної точки обчислити відстань від точки до контуру (найменшу з відстаней від точки до точок контуру) та вивести повідомлення про розташування точки та відстань до контуру.
//Користувач задає значення параметра контуру, поки воно не є допустимим, тобто додатним. Якщо замість того, щоб увести значення, користувач натискає на клавіші Ctrl-Z або на яку-небудь нецифрову клавішу, а потім на Enter, то в окремому рядку програма виводить повідомлення <<<CONTOUR IS ABSENT>>> й завершується. Якщо успішно введено додатне значення параметра, то далі по одній вводяться та обробляються точки (визначається їх розташування та відстань до контуру). Ознака закінчення роботи з точками – замість уведення точки натиснуто на Ctrl-Z чи на яку-небудь нецифрову клавішу, а потім на Enter.

//Вимоги до виконання
//1. Додати функцію getCont. Вона повертає ознаку, чи отримано від користувача додатне значення параметра контуру. Це значення передається з її виклику за допомогою параметра-посилання.
//2. Додати функцію обробки контуру processCont, параметром якої є параметр контуру. Вона в циклі викликає функції введення координат точки, обробки точки та виведення результатів обробки. У разі неуспішного введення точки вона виводить повідомлення <<<END OF POINTS>>> і закінчує свою роботу.
//3. Якщо додатне значення параметра контуру не отримано, то головна функція виводить повідомлення <<<CONTOUR IS ABSENT>>>, інакше викликає функцію обробки контуру. У головній функції тепер відсутнє поняття «точка». Перед закінченням роботи головна функція виводить в окремому рядку повідомлення <<<END OF WORK>>>.
//4. Додати функцію distPC, яка обчислює й повертає відстань від точки до контуру. Може містити виклик функції whereP.
//5. Параметрами функцій обробки точки processP, визначення розташування whereP та обчислення відстані distPC мають бути параметр контуру та координати точки.
//6. Додати функцію виведення результатів обробки точки putResult. Вона отримує параметр контуру, точку, ознаку розташування точки та відстань від контуру до точки. Після повідомлення про розташування точки в наступному рядку виводиться слово DISTANCE= та отримана відстань.
